% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util.R
\name{parallelize}
\alias{parallelize}
\title{Parallelize the evaluation of an expression}
\usage{
parallelize(expr, num_cores = NULL, run_time = TRUE, ...)
}
\arguments{
\item{expr}{An expression to be evaluated.}

\item{num_cores}{The number of cores to parallelize across. By default the
number of available cores minus one (i.e., `parallel::detectCores() - 1`)
is used.}

\item{run_time}{Should the time taken to run `expr` be printed?}

\item{...}{Additional arguments to be passed to [run_time()]}
}
\value{
The result of evaluating `expr`
}
\description{
A convenient wrapper around the parallel processing backend from
the doParallel package. Simply pass in the expression you'd like to be run in
parallel and the result will be returned. Of course, this only helps if the
code in `expr`` is written to take advantage of a parallel backend; good
examples of this are training models with `caret::train`` or custom code
making use of the `parApply` family of functions.
}
\details{
Once the code has evaluated successfully or crashed the CPU cluster is shut
down, ensuring you don't keep requesting additional resources without freeing
any up.
}
